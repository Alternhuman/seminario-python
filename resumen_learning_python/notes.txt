Fun fact: Name's based on Monty Python's Flying Circus
We need history
[Chapter 1]
Why do people use Python?
	Software Quality: 
		Readability, coherence. It sets apart from "kitchen sink" languages, like Perl. Readable, therefore maintainable. Deep support for OOP is a plus as well.
		It seems to just "fit your brain": Everything is comprehensible with a few core concepts
		Minimalist approach
	Developer productivity: 
		1/3, 1/5 to the size of a C/Java equivalent. Also it is not necessary to compile.
		Internet-boom: difficult to find enough programmers to implement sw apps. Now, programming staffs are force to accomplish the same with few people. In both of those scenarios, Python allows to get more with less effort.
		Deliberately optimize for speed of development.
	Program portability:
		Usually trivial
		GUIs are usually portable as well
	Support libraries:
		Prebuilt functionality
		Application-level programming tasks
		Extended by 3rd parties or homemade software
	Component integration:
		Usable with C, C++, Java, COM, Corba, .NET, SOAM, XML-RPC
	Enjoyment: "Pleasure than chore"

Downside: It is not as fast as C/C++.
	Nowadays it is optimized by translating to bytecode.
	It is generally fast
	When something like process a file or render a GUI, it is translated to C-compiled code, so it runs at C speed
	When speed is needed, some crucial parts can be written in C and then linked
	NumPy is an extension that combines ease-of-use with powerful computing
Who uses Python?
	500K/1M users
	Google, Yahoo! use it in Internet services
	HP, Seagate, IBM: Hw testing. Whole list at python.org
What can be done with Python?
	Basically anything "real"
	Main:
		System programming: Easy interfaces for OSs services: perfect for sysadmin, sh, searching files, directory trees, launch other programs, parallel processing.
		It is POSIX! Works with ENVVARS, files, sockets, pipes, processes, multiple threads, regex, cmd args, std stream, filename expansions, shell.command launchers.
	GUIs
		It is simple
		Comes with std OOP for GUIs, like Tk Tkinter (portable with native Look & Feel), PMW for widgets to Tinter, wxPython (based on C++)
		PythonCard
	Internet Scripting:
		Networking tasks
		Sockets, CGI, FTP, XML, parse, R/S mail, fetch webs, HTML, XML-RPC, SOAP, telnet remarkably simple
		HTMLGen generates code
		win32all -> Embed Python as JS
		Zope, WebWare and Quixote -> Easy & fast dev of large websites
	Component integration
	Database Programming: pickle module
	Rapid prototyping: Create a draft, then move to C/C+. Parts that do not require efficiency remain in Python
	Numeric programming
	Gaming, Images, AI, XML and More
Python's technical strengths:
	It's OO
	It's free and supported
	Community: Guido van Rossum: Benevolent Dictator For Life of Python (BDFL), also creator. Also +1000 fellows
		Language changes folllow a formal enhancement process (PEP process) and be scrutinized by the BDFL. It makes it more conservative than other languages.
	Portable.
	Powerful:
		Dynamic typing
		Automatic memory mgmt
		Programming-in-the-large support: Modules, classes and exceptions
		Built-in object types: commonly used data structures
		Built-in tools
		Library utilities
		3rd-party utilities
	It's mixable
	Easy to use&learn
	Cleaner syntax
	
[Chapter 2: How Python runs programs]
	Interpreter and support library at least
	Compiled to byte code: lower level, platform-independent
	.pyc is the result. With timestamps, it is only updated when necessary
	PVirtual Machine interprets it
	A few implementations: CPython: portable to ANSI C, Jython: Java classes that compile Python source code to Java byte code, routing it to the JVM (applets, GUI, etc), Python.NET
	Python.NET->Integrated with C#
	Psyco: JIT Python: Speeds up drammaticaly. Uses different data types at different times
	Frozen binaries: Bundle everything (PVM, etc)
[Chapter 3: How to run programs]
	Interactive command-line
	Works with pipes and output redirection
	#!/usr/bin/env python

[Chapter 4: Numbers]
	Built-in types are good
	Numeric:
		int
		float
		double
		NEW: anything your computer can store, and complex numbers (plus operations with them)
		Octal and hex are also trivial
		Operators: Same as C (equal in precedence)
			New: lambda args: expression -> Anonymous function
					is -> Type of object
					More at table 4-3 pg 58
		Representation: Str and Repr display formats
		oct(), hex() return values in such bases
		Python is dynamically data-typed
		Garbage collection
[Chapter 5: Strings]
	A kind of sequence (att. to that later)
	It doesn't matter the kind of quoting marks
	Literals: "spa'm", 'spa"m', '''...spam...''', "s\tp\na\0m"

	Useful functions: len(), 
	Scape chars:
		\newline
		\\
		\'
		\b, \f (formfeed)
		\r (carriage return)
		\N{} Unicode
	Raw strings (supress escape characters)
	""" characters code multiline block strings
	Unicode strings encode larger character sets
		u'spam'
	Mixing strings is no problem. The concatenation is trivial and returns a Unicode string
	str(), unicode() transform
	Since strings are ordered collections of characters they can be accessed by indexing
	S[-2]: The second from the end
	New operator [:n] -> Extracts contiguous sections of a sequence:
		S[1:3]->Characters 1 to 3 (not incluiding it)
		S[:3]->Characters until 3
		S[3:] -> Characters from 3
		S[:-1]->Every character except the last item
		S[:]->From 0 to the end (a top-level copy)
		OPTIONAL THIRD INDEX: THE STEP:
			X[1:10:2]->Fetches every other item in X from offsets 1-9, it will collect items from offsets 1,3,5 and so on.
			"hello"[::-1] -> olleh
		Example of usefulness: argv[1:] -> removes the name of the instance
	Strings cannot be converted to numbers automatically
	Strings are immutable->To change a string you have to make a new one
	S = S[:4] + 'Burger' + S[-1]
	Formatting: 'That value is $d' % ('999') IT IS LIKE C!
	Also concatenation: "The knights who say %s" % variable_with_string_inside
	Advanced string formatting @ pg 88
	String methods @ pg 91


OBJECTS	
	Three main categories, with operations associated to them: Numbers (addition, manipulation), Sequences (indexing, slicing, concatenation), Mapping (indexing by key)
	Mutable types can be changed in-place. Non-mutable guarantee integrity

Lists and dictionaries:
	Lists are Python's most flexible ordered colllection object type. They can contain any sort of object (even other lists)
	They do most of the dirty job that the programmer had to do in ~C
		Ordered collections of arbitrary objects->Left-to-right positional order
		Accessed by offset
		Variable length, heterogeneous, arbitrarily nestable
		Of the category mutable sequence->Lists can be both changed in place and respond to all the sequene operations used with strings
		Arrays of object references: They contain >=0 references to other objects. Fetching an item is as fast as in C (they are really C arrays inside the interprter). It is always a reference, not a copy (unless explicit)
		Examples @ pg 98
			L1 = [ ] 
			L3 = ['abc', ['def', 'ghi']]
			L3.append('jklm')
		Lists in action: 
			Basic operations: len(). ['Patata'] * 4 = ['Patata', 'Patata', 'Patata', 'Patata']
			for x in [1, 2, 3]: print x
			[1, 2] + list("34") -> Important: operators without same operand type will raise an error
			Lists are mutable: changing lists in-place
				.sort(), .extend()
			Dictionaries: The mosts flexile built-in data type in Python. Dictionaries are unordered colections, their chief distinction is that items are stored and fetched in dictionaries by key, instead of positional offset. They replace many of the searching algorithms and data structures you might have to implement manually in low-level
				They belong to the category mutable mapping
				Accessed by key, not offsets
				Unordered collections of arbitrary objects. They aren't kept in a particular order. Fun fact: Python randomizes th order in order to provide a quick lookup. Keys are symolic locations of items in a dictionary.
				Variable lenguth, heterogeneous, arbitrarily nestable
				tables of object references (hash tables)
				Dictionaries in action:
					{key:value}
					D={'spam':1, 'eggs':2}
					.copy, keys, has_key(), values(), get(key, default), update, dict() (Construction)
					Accessed like arrays-> d2['spam']
					Change dictionaries in-place. As easy as an assignment
					d2.update(d3)->Concatenate
					Notes: Sequence operations don't work
						Assigning to new indexes add entries
						Keys need not always be strings
					Since every item of an array must be used, dictionaries can be used to simulate a flexible list
					They usually replace data structures
[Chapter 7: Tuples, files, and everything else]
	Tuple: basically like a list, but immutable. They are ordered collections, accessed by offset, are sequences, have a fixed length, heterogeneous, arbitrarily nestable and arrays of nestable objects
		t1=(0,1,2,3, 'AA');
		t1[3];
		for x in t1
		3 in t1

		Operations: +, *, indexing, slicing
		They do not provide operations, it is necessary to convert them to arrays before (.list())
		Why lists and tules? Integrity

		Files:
			open() -> Like C
			.read(/N), .readline
			.write(/N), .writeline
			.close()
	Summary: Lists, dictionaries and tuples can hold any kind of object
		List, dictionaries and tuples can be arbitrarily nested
		Lists and dictionaries can dynamically grow and shrink

		Reference vs. Copies: Be aware of the consequences of both
			.copy()
	All objects respond to comparisons: test for equality, relatie magnitude, et. They inspect all parts of compound objects until a result can be determined
	== determines value equivalence
	is operator test object identity
	Booleans exist since 2.3
	Empty, 0, len(0), 0.0, "", [], {} return false

	Python's type hierarchies. Image pg 124
	Other types: Linked-in C extensions or Python classes, regex, DBM files, GUI widgets...
	References: in case a loop is detected, [...] is inserted
[Part III: Statements and syntax]
	Familiar and simple syntax
[Chapter 8: Assignment, expressions and print]
	Pograms are coposed of modules
	Modules contain statements
	Statements contain expressions
	Expressions create and process objects
	Statements pg 134, similar to C, C++
	Implicit assignments: import, from, def, class, for, function arguments
	Variable name rules: just like C
	IMPORTANT: names have no type, but objects do
	Expressions: just like C, but
		spam < ham < eggs == spam < ham and ham < eggs
	Print, just like C
		sys.stdout = <Descriptor>

[Chapter 9: if test]
	There is no switch. Alternative, dictionary:
	choice = 'ham'
	print{'spam': 1.25, 'ham': 1.99}[choice]
Block delimiters:
	Python works just like that, it needs indentation to determine the scope

[Chapter 10: while and for]	
	while:
		while <test>
			<>
		else:
			<> # Run if didn't exit loop with break
		